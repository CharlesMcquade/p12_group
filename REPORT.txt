Final Project Report


-----Group-----
Name: Brian Vodicka
Email:
UTeid: 

Name: Dylan Charles Inglis
Email: Dylanmcquade@yahoo.com -- cinglis@cs.utexas.edu
UTeid: dci223



Overview:
    The main goal we had in mind for this project was to implement writing to the filesystem and to add functionality to the shell that utilizes that implementation. Implementing the lowest level of writing to disk was fairly simple since it is very similar to reading- the same process is used for all types of writes. Pitfalls came when the desire came about to add more functionality, and the freeform of the project allowed us to pursue ideas that changed old code as well as added new features.


Writing:
    Added functionality at the ide level to write to disk. Abstracted it with write(offset, buf, length) methods for block devices, files, and openfiles. Added other helper methods like resize() which would change the length attribute of the underlying openfile and append() which would write to the end of the file without needing to know the length of it- it would also find a new block if we had reached the end.

Error codes, error checking:
    Added error codes and error reporting extensively. After execcing or system calling, user code will check for errors and report them- error codes are general enough to be reusable but specific enough to be interpretable. For instance, mkdir() could return an error for: Not enough space, already a directory named what is desired, directory name too long, root directory cannot be more than one block, etc... If the program itself does not have a case that directly explains the error, it will print it for the user to check. 

Working Directories:
    Added the concept of a working directory. Implementing this required a few changes. We decided to make it a File Descriptor and for it to reliably be the first entry in the Descriptor Table. This meant ensuring that entry 1 was never used otherwise. The working directory is always copied to the new program, even upon execv() (this means that it is not dereferenced by the closeAll() call and the closeWorkingDir() method must be explicitly called in order to close it). Init sets its working directory to root and then execv's shell, which inherits it from init.

cd: 
    Utilizes the Working Directory descriptor, each system call that used to go through root now goes through the working directory instead, except for open(). Open will first go through the root directory (this is to check for executable programs which reside in root. Similar to linux with it's PATH- if we had more time we would add a seperate folder for executables), if the program is not found there it will search in the working directory. Arguments are always searched for only in the working directory. 

    I changed the header size of all FAT439 entries to 16 bytes in order to add the concept of '.', the self-reference, and '..', the parent directory reference. If lookup interprets '.', it will simply return itself (8 bytes in the header contain the block number that the file starts at). '..' adds the ability to move up directories more easily, as the other 8 bytes that were added contain the parent directory's FAT block number. 

mkdir: 
    Ability to make directories. You can then 'cd' into them and mkdir() there, going deeper down the rabbit hole...

rm:
    Not fully working, I'm not sure what the error is. The implementation idea was, given an offset in a file 'O' and a length 'l' to remove in bytes, we would simply read in the 'N' file length minus (O + l) to a buffer and then proceed to write that at the original offset, effectively overwriting whatever was deleted within the file. In practice, there are some offset issues that haven't been fully resolved.

